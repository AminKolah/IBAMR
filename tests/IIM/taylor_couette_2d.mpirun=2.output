
IIMethod: mesh part 0 is using FIRST order LAGRANGE finite elements.

IBHierarchyIntegrator::initializePatchHierarchy(): tag_buffer = 0
INSStaggeredHierarchyIntegrator::initializeCompositeHierarchyData():
  projecting the interpolated velocity field
INSStaggeredHierarchyIntegrator::regridProjection(): regrid projection solve residual norm        = 2.96255e-10
Input database:
input_db {
   Re                           = 100                       // input used
   MU                           = 0.01                      // input used
   RHO                          = 1                         // input used
   L                            = 4                         // input used
   U_MAX                        = 2                         // input not used
   MAX_LEVELS                   = 1                         // input used
   REF_RATIO                    = 1                         // input used
   N                            = 128                       // input used
   FAC                          = 1                         // input used
   SHIFT1                       = -2.83968                  // input used
   NFINEST                      = 128                       // input used
   DX0                          = 0.03125                   // input not used
   DX                           = 0.03125                   // input used
   MFAC                         = 2                         // input used
   ELEM_TYPE                    = "TRI3"                    // input used
   elem_order                   = "FIRST"                   // input not used
   R1                           = 0.5                       // input used
   R2                           = 6                         // input used
   B                            = 0                         // input not used
   OMEGA1                       = 2                         // input used
   OMEGA2                       = -2                        // input used
   CREEPING_FLOW                = FALSE                     // input used
   IB_DELTA_FUNCTION            = "IB_3"                    // input used
   SPLIT_FORCES                 = TRUE                      // input used
   USE_PRESSURE_JUMP_CONDITIONS = TRUE                      // input used
   USE_VELOCITY_JUMP_CONDITIONS = TRUE                      // input used
   WSS_CALC_WIDTH               = 1.05                      // input used
   P_CALC_WIDTH                 = 1.3                       // input used
   USE_CONSISTENT_MASS_MATRIX   = TRUE                      // input used
   NORMALIZE_PRESSURE_JUMP      = TRUE                      // input used
   IB_POINT_DENSITY             = 4                         // input used
   START_TIME                   = 0                         // input used
   CFL_MAX                      = 0.2                       // input used
   DT                           = 0.003125                  // input used
   END_TIME                     = 0.03125                   // input used
   GROW_DT                      = 2                         // input used
   NUM_CYCLES                   = 1                         // input used
   CONVECTIVE_TS_TYPE           = "ADAMS_BASHFORTH"         // input used
   CONVECTIVE_OP_TYPE           = "STABILIZED_PPM"          // input used
   CONVECTIVE_FORM              = "ADVECTIVE"               // input used
   NORMALIZE_PRESSURE           = TRUE                      // input used
   ERROR_ON_DT_CHANGE           = TRUE                      // input used
   VORTICITY_TAGGING            = TRUE                      // input used
   TAG_BUFFER                   = 1                         // input used
   REGRID_CFL_INTERVAL          = 0.5                       // input used
   OUTPUT_U                     = TRUE                      // input used
   OUTPUT_P                     = TRUE                      // input used
   OUTPUT_F                     = TRUE                      // input used
   OUTPUT_OMEGA                 = TRUE                      // input used
   OUTPUT_DIV_U                 = TRUE                      // input used
   ENABLE_LOGGING               = TRUE                      // input used
   YC                           = 0                         // input used
   XC                           = 0                         // input used
   KAPPA_S                      = 204.8                     // input used
   ETA_S                        = 0                         // input used
   EXPLICITLY_REMOVE_NULLSPACE  = TRUE                      // input not used
   AA                           = -2.02797                  // input used
   BB                           = 1.00699                   // input used
   SHIFT                        = -2.84065                  // input used
   U                            = "(sqrt(X0*X0 + X1*X1)< R1 ? -omega1*X1 : (sqrt(X0*X0 + X1*X1)> R2 ? 0.0 : -X1*(AA + BB/(X0*X0 + X1*X1))))" // input used
   V                            = "(sqrt(X0*X0 + X1*X1)< R1 ? omega1*X0 : (sqrt(X0*X0 + X1*X1)> R2 ? 0.0 : X0*(AA + BB/(X0*X0 + X1*X1))))" // input used
   P                            = "(sqrt(X0*X0 + X1*X1)< R1 ? 0.5*omega1*omega1*(X0*X0 + X1*X1)  + shift : 0.5*AA*AA*(X0*X0 + X1*X1) - 0.5*BB*BB/(X0*X0 + X1*X1) + AA*BB*log(X0*X0 + X1*X1) + 0.5*omega1*omega1*(R1*R1) -(0.5*AA*AA*(R1*R1) - 0.5*BB*BB/(R1*R1) + AA*BB*log(R1*R1))    + shift )" // input used
   VelocityBcCoefs_0 {
      MU               = 0.01                               // input used
      R1               = 0.5                                // input used
      R2               = 6                                  // input used
      omega1           = 2                                  // input used
      omega2           = -2                                 // input used
      xc               = 0                                  // input used
      yc               = 0                                  // input used
      AA               = -2.02797                           // input used
      BB               = 1.00699                            // input used
      shift            = -2.84065                           // input used
      acoef_function_0 = "1.0"                              // input used
      acoef_function_1 = "1.0"                              // input used
      acoef_function_2 = "1.0"                              // input used
      acoef_function_3 = "1.0"                              // input used
      bcoef_function_0 = "0.0"                              // input used
      bcoef_function_1 = "0.0"                              // input used
      bcoef_function_2 = "0.0"                              // input used
      bcoef_function_3 = "0.0"                              // input used
      gcoef_function_0 = "-X1*(AA + BB/(X0*X0 + X1*X1))"    // input used
      gcoef_function_1 = "-X1*(AA + BB/(X0*X0 + X1*X1))"    // input used
      gcoef_function_2 = "-X1*(AA + BB/(X0*X0 + X1*X1))"    // input used
      gcoef_function_3 = "-X1*(AA + BB/(X0*X0 + X1*X1))"    // input used
   }
   VelocityBcCoefs_1 {
      R1               = 0.5                                // input used
      R2               = 6                                  // input used
      omega1           = 2                                  // input used
      omega2           = -2                                 // input used
      MU               = 0.01                               // input used
      AA               = -2.02797                           // input used
      BB               = 1.00699                            // input used
      xc               = 0                                  // input used
      yc               = 0                                  // input used
      acoef_function_0 = "1.0"                              // input used
      acoef_function_1 = "1.0"                              // input used
      acoef_function_2 = "1.0"                              // input used
      acoef_function_3 = "1.0"                              // input used
      bcoef_function_0 = "0.0"                              // input used
      bcoef_function_1 = "0.0"                              // input used
      bcoef_function_2 = "0.0"                              // input used
      bcoef_function_3 = "0.0"                              // input used
      gcoef_function_0 = "X0*(AA + BB/(X0*X0 + X1*X1))"     // input used
      gcoef_function_1 = "X0*(AA + BB/(X0*X0 + X1*X1))"     // input used
      gcoef_function_2 = "X0*(AA + BB/(X0*X0 + X1*X1))"     // input used
      gcoef_function_3 = "X0*(AA + BB/(X0*X0 + X1*X1))"     // input used
   }
   VelocityInitialConditions {
      R1         = 0.5                                      // input used
      R2         = 6                                        // input used
      omega1     = 2                                        // input used
      omega2     = -2                                       // input used
      xc         = 0                                        // input used
      yc         = 0                                        // input used
      AA         = -2.02797                                 // input used
      BB         = 1.00699                                  // input used
      function_0 = "(sqrt(X0*X0 + X1*X1)< R1 ? -omega1*X1 : (sqrt(X0*X0 + X1*X1)> R2 ? 0.0 : -X1*(AA + BB/(X0*X0 + X1*X1))))" // input used
      function_1 = "(sqrt(X0*X0 + X1*X1)< R1 ? omega1*X0 : (sqrt(X0*X0 + X1*X1)> R2 ? 0.0 : X0*(AA + BB/(X0*X0 + X1*X1))))" // input used
   }
   PressureInitialConditions {
      AA       = -2.02797                                   // input used
      BB       = 1.00699                                    // input used
      R1       = 0.5                                        // input used
      R2       = 6                                          // input used
      omega1   = 2                                          // input used
      omega2   = -2                                         // input used
      shift    = -2.84065                                   // input used
      function = "(sqrt(X0*X0 + X1*X1)< R1 ? 0.5*omega1*omega1*(X0*X0 + X1*X1)  + shift : 0.5*AA*AA*(X0*X0 + X1*X1) - 0.5*BB*BB/(X0*X0 + X1*X1) + AA*BB*log(X0*X0 + X1*X1) + 0.5*omega1*omega1*(R1*R1) -(0.5*AA*AA*(R1*R1) - 0.5*BB*BB/(R1*R1) + AA*BB*log(R1*R1))    + shift )" // input used
   }
   IBHierarchyIntegrator {
      start_time                       = 0                  // input used
      end_time                         = 0.03125            // input used
      grow_dt                          = 2                  // input used
      num_cycles                       = 1                  // input used
      regrid_cfl_interval              = 0.5                // input used
      dt_max                           = 0.003125           // input used
      error_on_dt_change               = TRUE               // input used
      enable_logging                   = TRUE               // input used
      enable_logging_solver_iterations = FALSE              // input used
   }
   IIMethod {
      IB_delta_fcn                     = "IB_3"             // input used
      split_forces                     = TRUE               // input not used
      use_pressure_jump_conditions     = TRUE               // input used
      use_velocity_jump_conditions     = TRUE               // input used
      use_consistent_mass_matrix       = TRUE               // input used
      IB_point_density                 = 4                  // input used
      wss_calc_width                   = 1.05               // input used
      p_calc_width                     = 1.3                // input not used
      min_ghost_cell_width             = 6                  // input used
      normalize_pressure_jump          = TRUE               // input not used
      enable_logging_solver_iterations = FALSE              // input not used
   }
   INSStaggeredHierarchyIntegrator {
      mu                               = 0.01               // input used
      rho                              = 1                  // input used
      start_time                       = 0                  // input used
      end_time                         = 0.03125            // input used
      creeping_flow                    = FALSE              // input used
      grow_dt                          = 2                  // input used
      convective_time_stepping_type    = "ADAMS_BASHFORTH"  // input used
      convective_op_type               = "STABILIZED_PPM"   // input used
      convective_difference_form       = "ADVECTIVE"        // input used
      normalize_pressure               = TRUE               // input used
      cfl                              = 0.2                // input used
      dt_max                           = 0.003125           // input used
      using_vorticity_tagging          = TRUE               // input used
      vorticity_rel_thresh             = 0.01               // input used
      tag_buffer                       = 1                  // input used
      output_U                         = TRUE               // input used
      output_P                         = TRUE               // input used
      output_F                         = TRUE               // input used
      output_Omega                     = TRUE               // input used
      output_Div_U                     = TRUE               // input used
      enable_logging                   = TRUE               // input used
      enable_logging_solver_iterations = FALSE              // input used
   }
   Main {
      log_file_name               = "output"                // input used
      log_all_nodes               = FALSE                   // input used
      viz_writer                  = "VisIt", "ExodusII"     // input used
      viz_dump_interval           = -1                      // input used
      viz_dump_dirname            = "viz_IIM_2D"            // input used
      visit_number_procs_per_file = 1                       // input used
      restart_dump_interval       = 0                       // input used
      restart_dump_dirname        = "restart_IIM2d"         // input used
      data_dump_interval          = 0                       // input used
      data_dump_dirname           = "hier_data_IIM2d"       // input used
      timer_dump_interval         = 0                       // input used
   }
   CartesianGeometry {
      domain_boxes       = [(0,0),(127,127)]                // input used
      x_lo               = -2, -2                           // input used
      x_up               = 2, 2                             // input used
      periodic_dimension = 0, 0                             // input used
   }
   GriddingAlgorithm {
      max_levels                = 1                         // input used
      efficiency_tolerance      = 0.85                      // input used
      combine_efficiency        = 0.85                      // input used
      check_nonrefined_tags     = 'w'                       // from default
      check_overlapping_patches = 'i'                       // from default
      extend_tags_to_bdry       = FALSE                     // from default
      ratio_to_coarser {
         level_1 = 1, 1                                     // input not used
         level_2 = 1, 1                                     // input not used
         level_3 = 1, 1                                     // input not used
         level_4 = 1, 1                                     // input not used
         level_5 = 1, 1                                     // input not used
      }
      largest_patch_size {
         level_0 = 128, 128                                 // input used
      }
      smallest_patch_size {
         level_0 = 128, 128                                 // input used
      }
   }
   StandardTagAndInitialize {
      tagging_method = "GRADIENT_DETECTOR"                  // input used
   }
   LoadBalancer {
      bin_pack_method                      = "SPATIAL"      // input used
      max_workload_factor                  = 1              // input used
      ignore_level_box_union_is_single_box = FALSE          // from default
   }
   TimerManager {
      print_exclusive      = FALSE                          // input used
      print_total          = TRUE                           // input used
      print_threshold      = 0.1                            // input used
      timer_list           = "IBAMR::*::*", "IBTK::*::*", "*::*::*" // input used
      print_processor      = TRUE                           // from default
      print_max            = FALSE                          // from default
      print_summed         = FALSE                          // from default
      print_user           = FALSE                          // from default
      print_sys            = FALSE                          // from default
      print_wall           = TRUE                           // from default
      print_percentage     = TRUE                           // from default
      print_concurrent     = FALSE                          // from default
      print_timer_overhead = FALSE                          // from default
   }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 0
Simulation time is 0
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0,0.00165672], dt = 0.00165672
IBHierarchyIntegrator::advanceHierarchy(): regridding prior to timestep 0
IBHierarchyIntegrator::regridHierarchy(): starting Lagrangian data movement
IBHierarchyIntegrator::regridHierarchy(): regridding the patch hierarchy
IBHierarchyIntegrator::regridHierarchy(): finishing Lagrangian data movement
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing convective operator
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing velocity subdomain solver
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing pressure subdomain solver
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing incompressible Stokes solver
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.91041e-08
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.72227e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.2
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 0
Simulation time is 0.00165672
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0130017

 Lagrangian WSS_max_norm = 0.0124683

 Lagrangian U_L2_norm = 0.0939759

 Lagrangian U_max_norm = 0.0795187

 Lagrangian disp_L2_norm = 0.000155119

 Lagrangian disp_max_norm = 0.000130699

Lagrangian P_L2_norm = 4.14763

Lagrangian P_max_norm = 2.34079


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 1
Simulation time is 0.00165672
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.00165672,0.00331344], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 2.52503e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.4
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 1
Simulation time is 0.00331344
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0301451

 Lagrangian WSS_max_norm = 0.0249458

 Lagrangian U_L2_norm = 0.106052

 Lagrangian U_max_norm = 0.0954373

 Lagrangian disp_L2_norm = 1.78575e-05

 Lagrangian disp_max_norm = 2.39371e-05

Lagrangian P_L2_norm = 4.14885

Lagrangian P_max_norm = 2.34823


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 2
Simulation time is 0.00331344
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.00331344,0.00497016], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.63343e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.6
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 2
Simulation time is 0.00497016
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0226125

 Lagrangian WSS_max_norm = 0.0148911

 Lagrangian U_L2_norm = 0.0707139

 Lagrangian U_max_norm = 0.0491637

 Lagrangian disp_L2_norm = 0.000120887

 Lagrangian disp_max_norm = 0.000100089

Lagrangian P_L2_norm = 4.14861

Lagrangian P_max_norm = 2.34422


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 3
Simulation time is 0.00497016
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.00497016,0.00662688], dt = 0.00165672
IBHierarchyIntegrator::advanceHierarchy(): regridding prior to timestep 3
IBHierarchyIntegrator::regridHierarchy(): starting Lagrangian data movement
IBHierarchyIntegrator::regridHierarchy(): regridding the patch hierarchy
IBHierarchyIntegrator::regridHierarchy(): finishing Lagrangian data movement
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.26657e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.2
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 3
Simulation time is 0.00662688
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0214924

 Lagrangian WSS_max_norm = 0.013667

 Lagrangian U_L2_norm = 0.0657514

 Lagrangian U_max_norm = 0.0438327

 Lagrangian disp_L2_norm = 0.000222299

 Lagrangian disp_max_norm = 0.000169005

Lagrangian P_L2_norm = 4.14865

Lagrangian P_max_norm = 2.34578


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 4
Simulation time is 0.00662688
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.00662688,0.0082836], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 5.8737e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.4
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 4
Simulation time is 0.0082836
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0197595

 Lagrangian WSS_max_norm = 0.0115482

 Lagrangian U_L2_norm = 0.0579407

 Lagrangian U_max_norm = 0.0344151

 Lagrangian disp_L2_norm = 0.000311455

 Lagrangian disp_max_norm = 0.000222324

Lagrangian P_L2_norm = 4.14867

Lagrangian P_max_norm = 2.34738


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 5
Simulation time is 0.0082836
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0082836,0.00994031], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 4.40747e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.6
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 5
Simulation time is 0.00994031
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0182758

 Lagrangian WSS_max_norm = 0.0102244

 Lagrangian U_L2_norm = 0.05133

 Lagrangian U_max_norm = 0.029277

 Lagrangian disp_L2_norm = 0.000390183

 Lagrangian disp_max_norm = 0.000264619

Lagrangian P_L2_norm = 4.14868

Lagrangian P_max_norm = 2.34845


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 6
Simulation time is 0.00994031
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.00994031,0.011597], dt = 0.00165672
IBHierarchyIntegrator::advanceHierarchy(): regridding prior to timestep 6
IBHierarchyIntegrator::regridHierarchy(): starting Lagrangian data movement
IBHierarchyIntegrator::regridHierarchy(): regridding the patch hierarchy
IBHierarchyIntegrator::regridHierarchy(): finishing Lagrangian data movement
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 3.3367e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.2
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 6
Simulation time is 0.011597
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0169048

 Lagrangian WSS_max_norm = 0.0100304

 Lagrangian U_L2_norm = 0.0452567

 Lagrangian U_max_norm = 0.027817

 Lagrangian disp_L2_norm = 0.000459279

 Lagrangian disp_max_norm = 0.000297783

Lagrangian P_L2_norm = 4.14869

Lagrangian P_max_norm = 2.34916


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 7
Simulation time is 0.011597
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.011597,0.0132538], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 2.33977e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.4
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 7
Simulation time is 0.0132538
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0156529

 Lagrangian WSS_max_norm = 0.00977874

 Lagrangian U_L2_norm = 0.0397374

 Lagrangian U_max_norm = 0.0267298

 Lagrangian disp_L2_norm = 0.000519609

 Lagrangian disp_max_norm = 0.000323654

Lagrangian P_L2_norm = 4.1487

Lagrangian P_max_norm = 2.34964


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 8
Simulation time is 0.0132538
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0132538,0.0149105], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.6613e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.6
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 8
Simulation time is 0.0149105
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0145061

 Lagrangian WSS_max_norm = 0.00945041

 Lagrangian U_L2_norm = 0.0346975

 Lagrangian U_max_norm = 0.0253123

 Lagrangian disp_L2_norm = 0.000571923

 Lagrangian disp_max_norm = 0.000344481

Lagrangian P_L2_norm = 4.14872

Lagrangian P_max_norm = 2.35027


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 9
Simulation time is 0.0149105
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0149105,0.0165672], dt = 0.00165672
IBHierarchyIntegrator::advanceHierarchy(): regridding prior to timestep 9
IBHierarchyIntegrator::regridHierarchy(): starting Lagrangian data movement
IBHierarchyIntegrator::regridHierarchy(): regridding the patch hierarchy
IBHierarchyIntegrator::regridHierarchy(): finishing Lagrangian data movement
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.21694e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.2
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 9
Simulation time is 0.0165672
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.013464

 Lagrangian WSS_max_norm = 0.00904788

 Lagrangian U_L2_norm = 0.0301282

 Lagrangian U_max_norm = 0.0235681

 Lagrangian disp_L2_norm = 0.000616953

 Lagrangian disp_max_norm = 0.000363143

Lagrangian P_L2_norm = 4.14873

Lagrangian P_max_norm = 2.35087


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 10
Simulation time is 0.0165672
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0165672,0.0182239], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.05193e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.4
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 10
Simulation time is 0.0182239
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0125195

 Lagrangian WSS_max_norm = 0.00857653

 Lagrangian U_L2_norm = 0.0259906

 Lagrangian U_max_norm = 0.0215183

 Lagrangian disp_L2_norm = 0.000655368

 Lagrangian disp_max_norm = 0.000389312

Lagrangian P_L2_norm = 4.14875

Lagrangian P_max_norm = 2.35149


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 11
Simulation time is 0.0182239
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0182239,0.0198806], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.11668e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.6
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 11
Simulation time is 0.0198806
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0116674

 Lagrangian WSS_max_norm = 0.00804595

 Lagrangian U_L2_norm = 0.022259

 Lagrangian U_max_norm = 0.0191952

 Lagrangian disp_L2_norm = 0.000687815

 Lagrangian disp_max_norm = 0.00041949

Lagrangian P_L2_norm = 4.14876

Lagrangian P_max_norm = 2.35218


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 12
Simulation time is 0.0198806
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0198806,0.0215373], dt = 0.00165672
IBHierarchyIntegrator::advanceHierarchy(): regridding prior to timestep 12
IBHierarchyIntegrator::regridHierarchy(): starting Lagrangian data movement
IBHierarchyIntegrator::regridHierarchy(): regridding the patch hierarchy
IBHierarchyIntegrator::regridHierarchy(): finishing Lagrangian data movement
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.27778e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.2
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 12
Simulation time is 0.0215373
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0109023

 Lagrangian WSS_max_norm = 0.00754245

 Lagrangian U_L2_norm = 0.0189091

 Lagrangian U_max_norm = 0.0169955

 Lagrangian disp_L2_norm = 0.000714877

 Lagrangian disp_max_norm = 0.000447561

Lagrangian P_L2_norm = 4.14877

Lagrangian P_max_norm = 2.35296


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 13
Simulation time is 0.0215373
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0215373,0.0231941], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.483e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.4
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 13
Simulation time is 0.0231941
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0102226

 Lagrangian WSS_max_norm = 0.00723175

 Lagrangian U_L2_norm = 0.0159337

 Lagrangian U_max_norm = 0.0157051

 Lagrangian disp_L2_norm = 0.000737108

 Lagrangian disp_max_norm = 0.000471607

Lagrangian P_L2_norm = 4.14878

Lagrangian P_max_norm = 2.35455


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 14
Simulation time is 0.0231941
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0231941,0.0248508], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.66746e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.6
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 14
Simulation time is 0.0248508
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.00962567

 Lagrangian WSS_max_norm = 0.00691368

 Lagrangian U_L2_norm = 0.0133274

 Lagrangian U_max_norm = 0.0143688

 Lagrangian disp_L2_norm = 0.00075506

 Lagrangian disp_max_norm = 0.000495143

Lagrangian P_L2_norm = 4.1488

Lagrangian P_max_norm = 2.3566


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 15
Simulation time is 0.0248508
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0248508,0.0265075], dt = 0.00165672
IBHierarchyIntegrator::advanceHierarchy(): regridding prior to timestep 15
IBHierarchyIntegrator::regridHierarchy(): starting Lagrangian data movement
IBHierarchyIntegrator::regridHierarchy(): regridding the patch hierarchy
IBHierarchyIntegrator::regridHierarchy(): finishing Lagrangian data movement
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.85768e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.2
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 15
Simulation time is 0.0265075
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.0091071

 Lagrangian WSS_max_norm = 0.0065867

 Lagrangian U_L2_norm = 0.0110786

 Lagrangian U_max_norm = 0.0129609

 Lagrangian disp_L2_norm = 0.00076925

 Lagrangian disp_max_norm = 0.000516523

Lagrangian P_L2_norm = 4.14881

Lagrangian P_max_norm = 2.3588


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 16
Simulation time is 0.0265075
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0265075,0.0281642], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.9214e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.4
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 16
Simulation time is 0.0281642
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.00865394

 Lagrangian WSS_max_norm = 0.00620486

 Lagrangian U_L2_norm = 0.00913814

 Lagrangian U_max_norm = 0.0113184

 Lagrangian disp_L2_norm = 0.000780128

 Lagrangian disp_max_norm = 0.000535511

Lagrangian P_L2_norm = 4.14883

Lagrangian P_max_norm = 2.36116


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 17
Simulation time is 0.0281642
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0281642,0.0298209], dt = 0.00165672
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.97468e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.2
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.6
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 17
Simulation time is 0.0298209
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.00826721

 Lagrangian WSS_max_norm = 0.00578456

 Lagrangian U_L2_norm = 0.0075165

 Lagrangian U_max_norm = 0.0095031

 Lagrangian disp_L2_norm = 0.000788109

 Lagrangian disp_max_norm = 0.000551743

Lagrangian P_L2_norm = 4.14885

Lagrangian P_max_norm = 2.36356


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 18
Simulation time is 0.0298209
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0298209,0.03125], dt = 0.00142906
IBHierarchyIntegrator::advanceHierarchy(): regridding prior to timestep 18
IBHierarchyIntegrator::regridHierarchy(): starting Lagrangian data movement
IBHierarchyIntegrator::regridHierarchy(): regridding the patch hierarchy
IBHierarchyIntegrator::regridHierarchy(): finishing Lagrangian data movement
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing velocity subdomain solver
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing incompressible Stokes solver
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.71245e-07
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.172516
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.172516
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 18
Simulation time is 0.03125
+++++++++++++++++++++++++++++++++++++++++++++++++++

 Lagrangian WSS_L2_norm = 0.00797562

 Lagrangian WSS_max_norm = 0.0055243

 Lagrangian U_L2_norm = 0.00632262

 Lagrangian U_max_norm = 0.00797513

 Lagrangian disp_L2_norm = 0.000792997

 Lagrangian disp_max_norm = 0.000563097

Lagrangian P_L2_norm = 4.1488

Lagrangian P_max_norm = 2.36573


+++++++++++++++++++++++++++++++++++++++++++++++++++
Computing error norms.

 p_Eulerian_L2_norm = 0.00310354
 p_Eulerian_max_norm = 0.00820289

 u_Eulerian_L2_norm = 0.00423672

 u_Eulerian_max_norm = 0.0284177

Error in the Eulerian u at time 0.03125:
  L2-norm:  0.004236785770354311
  max-norm: 0.02841767679584928
+++++++++++++++++++++++++++++++++++++++++++++++++++
 MU = 0.01
  dx:  0.03125
  dt: 0.001429056746515465
 Using the jump condition
