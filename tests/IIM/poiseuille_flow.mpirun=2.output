
IIMethod: mesh part 0 is using FIRST order LAGRANGE finite elements.


IIMethod: mesh part 1 is using FIRST order LAGRANGE finite elements.

IBHierarchyIntegrator::initializePatchHierarchy(): tag_buffer = 0
INSStaggeredHierarchyIntegrator::initializeCompositeHierarchyData():
  projecting the interpolated velocity field
INSStaggeredHierarchyIntegrator::regridProjection(): regrid projection solve residual norm        = 0
Input database:
input_db {
   Re                           = 100                       // input used
   RHO                          = 1                         // input used
   MU                           = 0.01                      // input used
   U_MAX                        = 2                         // input not used
   PI                           = 3.14159                   // input not used
   THETA                        = 0                         // input used
   MAX_LEVELS                   = 1                         // input used
   REF_RATIO                    = 1                         // input used
   N                            = 128                       // input used
   NFINEST                      = 128                       // input used
   L                            = 5                         // input used
   P_E                          = 0.2                       // input used
   H                            = 5                         // input used
   D                            = 1                         // input used
   FAC                          = 0                         // input used
   W                            = 0                         // input used
   DX0                          = 0.0390625                 // input not used
   DX                           = 0.0390625                 // input used
   MFAC                         = 2                         // input used
   ELEM_TYPE                    = "EDGE2"                   // input used
   elem_order                   = "FIRST"                   // input not used
   PK1_DEV_QUAD_ORDER           = "SEVENTH"                 // input not used
   X_LOC                        = 2.5                       // input used
   Y_LOC_MIN                    = 0.5                       // input used
   Y_LOC_MAX                    = 4.5                       // input used
   FEEDBACK_FORCER              = FALSE                     // input not used
   IB_DELTA_FUNCTION            = "IB_3"                    // input used
   SPLIT_NORMAL_FORCES          = TRUE                      // input used
   SPLIT_TANGENTIAL_FORCES      = TRUE                      // input used
   USE_PRESSURE_JUMP_CONDITIONS = TRUE                      // input used
   USE_VELOCITY_JUMP_CONDITIONS = TRUE                      // input used
   WSS_CALC_WIDTH               = 1.05                      // input used
   P_CALC_WIDTH                 = 1.2                       // input used
   USE_CONSISTENT_MASS_MATRIX   = TRUE                      // input used
   IB_POINT_DENSITY             = 4                         // input used
   SOLVER_TYPE                  = "STAGGERED"               // input not used
   CFL_MAX                      = 0.1                       // input used
   DT                           = 0.00195312                // input used
   START_TIME                   = 0                         // input used
   END_TIME                     = 0.0390625                 // input used
   GROW_DT                      = 2                         // input used
   NUM_CYCLES                   = 1                         // input used
   CONVECTIVE_TS_TYPE           = "ADAMS_BASHFORTH"         // input used
   CONVECTIVE_OP_TYPE           = "STABILIZED_PPM"          // input used
   CONVECTIVE_FORM              = "ADVECTIVE"               // input used
   NORMALIZE_PRESSURE           = FALSE                     // input used
   ERROR_ON_DT_CHANGE           = TRUE                      // input used
   VORTICITY_TAGGING            = TRUE                      // input used
   TAG_BUFFER                   = 1                         // input used
   REGRID_CFL_INTERVAL          = 0.5                       // input used
   OUTPUT_U                     = TRUE                      // input used
   OUTPUT_P                     = TRUE                      // input used
   OUTPUT_F                     = TRUE                      // input used
   OUTPUT_OMEGA                 = TRUE                      // input used
   OUTPUT_DIV_U                 = TRUE                      // input used
   ENABLE_LOGGING               = TRUE                      // input used
   KAPPA_S_THIN                 = 524.288                   // input used
   ETA_S_THIN                   = 0                         // input used
   X1_lower                     = 2                         // input used
   X1_upper                     = 3                         // input used
   U                            = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : cos(theta)*(p_e*D/(mu*(L/cos(theta) + D*tan(theta))))*(-X0*sin(theta) + (X1-X1_lower)*cos(theta))*(1 - (-X0*sin(theta) + (X1-X1_lower)*cos(theta))/D)))" // input used
   V                            = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : sin(theta)*(p_e*D/(mu*(L/cos(theta) + D*tan(theta))))*(-X0*sin(theta) + (X1-X1_lower)*cos(theta))*(1 - (-X0*sin(theta) + (X1-X1_lower)*cos(theta))/D)))" // input used
   FFAC                         = 0.04                      // input used
   P                            = "(X1 <= (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 >= (X1_upper + X0*tan(theta)) ? 0.0 : (-2.*p_e*(X0*cos(theta) + (X1-X1_lower)*sin(theta))/(L/cos(theta) + D*tan(theta)) + p_e)))" // input used
   VelocityInitialConditions {
      p_e        = 0.2                                      // input used
      theta      = 0                                        // input used
      D          = 1                                        // input used
      w          = 0                                        // input used
      L          = 5                                        // input used
      X1_lower   = 2                                        // input used
      X1_upper   = 3                                        // input used
      mu         = 0.01                                     // input used
      function_0 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : cos(theta)*(p_e*D/(mu*(L/cos(theta) + D*tan(theta))))*(-X0*sin(theta) + (X1-X1_lower)*cos(theta))*(1 - (-X0*sin(theta) + (X1-X1_lower)*cos(theta))/D)))" // input used
      function_1 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : sin(theta)*(p_e*D/(mu*(L/cos(theta) + D*tan(theta))))*(-X0*sin(theta) + (X1-X1_lower)*cos(theta))*(1 - (-X0*sin(theta) + (X1-X1_lower)*cos(theta))/D)))" // input used
   }
   PressureInitialConditions {
      D        = 1                                          // input used
      L        = 5                                          // input used
      H        = 5                                          // input used
      mu       = 0.01                                       // input used
      p_e      = 0.2                                        // input used
      theta    = 0                                          // input used
      X1_lower = 2                                          // input used
      X1_upper = 3                                          // input used
      function = "(X1 <= (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 >= (X1_upper + X0*tan(theta)) ? 0.0 : (-2.*p_e*(X0*cos(theta) + (X1-X1_lower)*sin(theta))/(L/cos(theta) + D*tan(theta)) + p_e)))" // input used
   }
   VelocityBcCoefs_0 {
      theta            = 0                                  // input used
      p_e              = 0.2                                // input used
      D                = 1                                  // input used
      w                = 0                                  // input used
      L                = 5                                  // input used
      X1_lower         = 2                                  // input used
      X1_upper         = 3                                  // input used
      mu               = 0.01                               // input used
      H                = 5                                  // input used
      acoef_function_0 = "( X1 < (X1_lower + X0*tan(theta)) ? 1.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 1.0 : 0.0 ) )" // input used
      acoef_function_1 = "( X1 < (X1_lower + X0*tan(theta)) ? 1.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 1.0 : 0.0 ) )" // input used
      acoef_function_2 = "1.0"                              // input used
      acoef_function_3 = "1.0"                              // input used
      bcoef_function_0 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : 1.0 ) )" // input used
      bcoef_function_1 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : 1.0 ) )" // input used
      bcoef_function_2 = "0.0"                              // input used
      bcoef_function_3 = "0.0"                              // input used
      gcoef_function_0 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : -(-2.*p_e*(X0*cos(theta) + (X1-X1_lower)*sin(theta))/(L/cos(theta) + D*tan(theta)) + p_e)))" // input used
      gcoef_function_1 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : -(-2.*p_e*(X0*cos(theta) + (X1-X1_lower)*sin(theta))/(L/cos(theta) + D*tan(theta)) + p_e)))" // input used
      gcoef_function_2 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : cos(theta)*(p_e*D/(mu*(L/cos(theta) + D*tan(theta))))*(-X0*sin(theta) + (X1-X1_lower)*cos(theta))*(1 - (-X0*sin(theta) + (X1-X1_lower)*cos(theta))/D)))" // input used
      gcoef_function_3 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : cos(theta)*(p_e*D/(mu*(L/cos(theta) + D*tan(theta))))*(-X0*sin(theta) + (X1-X1_lower)*cos(theta))*(1 - (-X0*sin(theta) + (X1-X1_lower)*cos(theta))/D)))" // input used
   }
   VelocityBcCoefs_1 {
      theta            = 0                                  // input used
      p_e              = 0.2                                // input used
      D                = 1                                  // input used
      w                = 0                                  // input used
      L                = 5                                  // input used
      X1_lower         = 2                                  // input used
      X1_upper         = 3                                  // input used
      mu               = 0.01                               // input used
      H                = 5                                  // input used
      acoef_function_0 = "1.0"                              // input used
      acoef_function_1 = "1.0"                              // input used
      acoef_function_2 = "0.0"                              // input used
      acoef_function_3 = "0.0"                              // input used
      bcoef_function_0 = "0.0"                              // input used
      bcoef_function_1 = "0.0"                              // input used
      bcoef_function_2 = "1.0"                              // input used
      bcoef_function_3 = "1.0"                              // input used
      gcoef_function_0 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : sin(theta)*(p_e*D/(mu*(L/cos(theta) + D*tan(theta))))*(-X0*sin(theta) + (X1-X1_lower)*cos(theta))*(1 - (-X0*sin(theta) + (X1-X1_lower)*cos(theta))/D)))" // input used
      gcoef_function_1 = "( X1 < (X1_lower + X0*tan(theta)) ? 0.0 : ( X1 > (X1_upper + X0*tan(theta)) ? 0.0 : sin(theta)*(p_e*D/(mu*(L/cos(theta) + D*tan(theta))))*(-X0*sin(theta) + (X1-X1_lower)*cos(theta))*(1 - (-X0*sin(theta) + (X1-X1_lower)*cos(theta))/D)))" // input used
      gcoef_function_2 = "0.0"                              // input used
      gcoef_function_3 = "0.0"                              // input used
   }
   IBHierarchyIntegrator {
      start_time                       = 0                  // input used
      end_time                         = 0.0390625          // input used
      grow_dt                          = 2                  // input used
      num_cycles                       = 1                  // input used
      regrid_cfl_interval              = 0.5                // input used
      dt_max                           = 0.00195312         // input used
      error_on_dt_change               = TRUE               // input used
      enable_logging                   = TRUE               // input used
      enable_logging_solver_iterations = FALSE              // input used
   }
   IIMethod {
      IB_delta_fcn                 = "IB_3"                 // input used
      split_normal_force           = TRUE                   // input not used
      split_tangential_force       = TRUE                   // input not used
      use_pressure_jump_conditions = TRUE                   // input used
      use_velocity_jump_conditions = TRUE                   // input used
      use_consistent_mass_matrix   = TRUE                   // input used
      IB_point_density             = 4                      // input used
      p_calc_width                 = 1.2                    // input not used
      wss_calc_width               = 1.05                   // input used
      min_ghost_cell_width         = 6                      // input used
   }
   INSStaggeredHierarchyIntegrator {
      mu                               = 0.01               // input used
      rho                              = 1                  // input used
      start_time                       = 0                  // input used
      end_time                         = 0.0390625          // input used
      grow_dt                          = 2                  // input used
      convective_time_stepping_type    = "ADAMS_BASHFORTH"  // input used
      convective_op_type               = "STABILIZED_PPM"   // input used
      convective_difference_form       = "ADVECTIVE"        // input used
      normalize_pressure               = FALSE              // input used
      cfl                              = 0.1                // input used
      dt_max                           = 0.00195312         // input used
      using_vorticity_tagging          = TRUE               // input used
      vorticity_rel_thresh             = 0.01               // input used
      tag_buffer                       = 1                  // input used
      output_U                         = TRUE               // input used
      output_P                         = TRUE               // input used
      output_F                         = TRUE               // input used
      output_Omega                     = TRUE               // input used
      output_Div_U                     = TRUE               // input used
      enable_logging                   = TRUE               // input used
      enable_logging_solver_iterations = FALSE              // input used
   }
   Main {
      log_file_name               = "output"                // input used
      log_all_nodes               = FALSE                   // input used
      viz_writer                  = "VisIt", "ExodusII"     // input used
      viz_dump_interval           = -1                      // input used
      viz_dump_dirname            = "viz_IIM_straight"      // input used
      visit_number_procs_per_file = 1                       // input used
      restart_dump_interval       = 0                       // input used
      restart_dump_dirname        = "restart_IB2d_slanted"  // input used
      data_dump_interval          = 0                       // input used
      data_dump_dirname           = "post_process_IIM_PBC_32_straight" // input used
      timer_dump_interval         = 0                       // input used
   }
   CartesianGeometry {
      domain_boxes       = [(0,0),(127,127)]                // input used
      x_lo               = 0, 0                             // input used
      x_up               = 5, 5                             // input used
      periodic_dimension = 0, 0                             // input used
   }
   GriddingAlgorithm {
      max_levels                = 1                         // input used
      efficiency_tolerance      = 0.8                       // input used
      combine_efficiency        = 0.8                       // input used
      check_nonrefined_tags     = 'w'                       // from default
      check_overlapping_patches = 'i'                       // from default
      extend_tags_to_bdry       = FALSE                     // from default
      ratio_to_coarser {
         level_1 = 1, 1                                     // input not used
         level_2 = 1, 1                                     // input not used
         level_3 = 1, 1                                     // input not used
         level_4 = 1, 1                                     // input not used
         level_5 = 1, 1                                     // input not used
         level_6 = 1, 1                                     // input not used
         level_7 = 1, 1                                     // input not used
      }
      largest_patch_size {
         level_0 = 256, 256                                 // input used
      }
      smallest_patch_size {
         level_0 = 8, 8                                     // input used
      }
   }
   StandardTagAndInitialize {
      tagging_method = "GRADIENT_DETECTOR"                  // input used
   }
   LoadBalancer {
      bin_pack_method                      = "SPATIAL"      // input used
      max_workload_factor                  = 1              // input used
      ignore_level_box_union_is_single_box = FALSE          // from default
   }
   TimerManager {
      print_exclusive      = FALSE                          // input used
      print_total          = TRUE                           // input used
      print_threshold      = 0.1                            // input used
      timer_list           = "IBAMR::*::*", "IBTK::*::*", "*::*::*" // input used
      print_processor      = TRUE                           // from default
      print_max            = FALSE                          // from default
      print_summed         = FALSE                          // from default
      print_user           = FALSE                          // from default
      print_sys            = FALSE                          // from default
      print_wall           = TRUE                           // from default
      print_percentage     = TRUE                           // from default
      print_concurrent     = FALSE                          // from default
      print_timer_overhead = FALSE                          // from default
   }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 0
Simulation time is 0
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0,0.00195312], dt = 0.00195312
IBHierarchyIntegrator::advanceHierarchy(): regridding prior to timestep 0
IBHierarchyIntegrator::regridHierarchy(): starting Lagrangian data movement
IBHierarchyIntegrator::regridHierarchy(): regridding the patch hierarchy
IBHierarchyIntegrator::regridHierarchy(): finishing Lagrangian data movement
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing convective operator
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing velocity subdomain solver
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing pressure subdomain solver
INSStaggeredHierarchyIntegrator::preprocessIntegrateHierarchy(): initializing incompressible Stokes solver
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 9.61126e-09
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 4.91282e-09
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0499328
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.0499328
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 0
Simulation time is 0.00195312
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.123873

 WSS_max_norm = 0.0715674

 U_L2_norm = 0.0581327

 U_max_norm = 0.0336187

 P_L2_norm = 0.119753

 P_max_norm = 0.119184

 disp_L2_norm = 0.000111583

 disp_max_norm = 6.44987e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 1
Simulation time is 0.00195312
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.00195312,0.00390625], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 3.58825e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0499411
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.0998739
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 1
Simulation time is 0.00390625
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.136429

 WSS_max_norm = 0.0788266

 U_L2_norm = 0.0148353

 U_max_norm = 0.00858814

 P_L2_norm = 0.11971

 P_max_norm = 0.119132

 disp_L2_norm = 8.31579e-05

 disp_max_norm = 4.81184e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 2
Simulation time is 0.00390625
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.00390625,0.00585938], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 3.77444e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.04995
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.149824
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 2
Simulation time is 0.00585938
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.128876

 WSS_max_norm = 0.0744672

 U_L2_norm = 0.0289848

 U_max_norm = 0.016795

 P_L2_norm = 0.119626

 P_max_norm = 0.119029

 disp_L2_norm = 0.000138843

 disp_max_norm = 8.03554e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 3
Simulation time is 0.00585938
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.00585938,0.0078125], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 2.44279e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0499585
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.199782
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 3
Simulation time is 0.0078125
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.136249

 WSS_max_norm = 0.0787336

 U_L2_norm = 0.0139191

 U_max_norm = 0.00806254

 P_L2_norm = 0.119498

 P_max_norm = 0.118874

 disp_L2_norm = 0.000112197

 disp_max_norm = 6.50235e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 4
Simulation time is 0.0078125
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0078125,0.00976562], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 3.03354e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0499674
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.24975
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 4
Simulation time is 0.00976562
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.131077

 WSS_max_norm = 0.0757504

 U_L2_norm = 0.0160543

 U_max_norm = 0.00932608

 P_L2_norm = 0.119329

 P_max_norm = 0.118667

 disp_L2_norm = 0.000143073

 disp_max_norm = 8.29298e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 5
Simulation time is 0.00976562
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.00976562,0.0117188], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.06014e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.049976
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.299726
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 5
Simulation time is 0.0117188
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.135587

 WSS_max_norm = 0.0783634

 U_L2_norm = 0.0102375

 U_max_norm = 0.00593456

 P_L2_norm = 0.119116

 P_max_norm = 0.118409

 disp_L2_norm = 0.0001235

 disp_max_norm = 7.16876e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 6
Simulation time is 0.0117188
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0117188,0.0136719], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 2.62303e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.049985
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.349711
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 6
Simulation time is 0.0136719
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.132176

 WSS_max_norm = 0.0763985

 U_L2_norm = 0.00949731

 U_max_norm = 0.00553427

 P_L2_norm = 0.118861

 P_max_norm = 0.118099

 disp_L2_norm = 0.000141786

 disp_max_norm = 8.23139e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 7
Simulation time is 0.0136719
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0136719,0.015625], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 2.60032e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0499938
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.399705
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 7
Simulation time is 0.015625
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.134993

 WSS_max_norm = 0.0780328

 U_L2_norm = 0.00696564

 U_max_norm = 0.00404041

 P_L2_norm = 0.118564

 P_max_norm = 0.117738

 disp_L2_norm = 0.000128506

 disp_max_norm = 7.47028e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 8
Simulation time is 0.015625
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.015625,0.0175781], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 2.36976e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0500029
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.449707
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 8
Simulation time is 0.0175781
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.132779

 WSS_max_norm = 0.0767594

 U_L2_norm = 0.00582494

 U_max_norm = 0.00340542

 P_L2_norm = 0.118223

 P_max_norm = 0.117326

 disp_L2_norm = 0.00013973

 disp_max_norm = 8.12401e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 9
Simulation time is 0.0175781
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0175781,0.0195312], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.45282e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0500118
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.499719
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 9
Simulation time is 0.0195312
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.134554

 WSS_max_norm = 0.0777919

 U_L2_norm = 0.00460739

 U_max_norm = 0.00267026

 P_L2_norm = 0.11784

 P_max_norm = 0.116862

 disp_L2_norm = 0.000131004

 disp_max_norm = 7.6251e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 10
Simulation time is 0.0195312
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0195312,0.0214844], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 2.20109e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0500209
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.54974
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 10
Simulation time is 0.0214844
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.133125

 WSS_max_norm = 0.0769723

 U_L2_norm = 0.0036463

 U_max_norm = 0.00213382

 P_L2_norm = 0.117414

 P_max_norm = 0.116346

 disp_L2_norm = 0.000138022

 disp_max_norm = 8.03454e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 11
Simulation time is 0.0214844
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0214844,0.0234375], dt = 0.00195312
IBHierarchyIntegrator::advanceHierarchy(): regridding prior to timestep 11
IBHierarchyIntegrator::regridHierarchy(): starting Lagrangian data movement
IBHierarchyIntegrator::regridHierarchy(): regridding the patch hierarchy
IBHierarchyIntegrator::regridHierarchy(): finishing Lagrangian data movement
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 2.05314e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.05003
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.05003
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 11
Simulation time is 0.0234375
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.134247

 WSS_max_norm = 0.0776275

 U_L2_norm = 0.00303395

 U_max_norm = 0.0017465

 P_L2_norm = 0.116945

 P_max_norm = 0.115778

 disp_L2_norm = 0.000132373

 disp_max_norm = 7.71209e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 12
Simulation time is 0.0234375
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0234375,0.0253906], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 2.0843e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0500392
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.100069
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 12
Simulation time is 0.0253906
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.133327

 WSS_max_norm = 0.0771011

 U_L2_norm = 0.00232805

 U_max_norm = 0.00134833

 P_L2_norm = 0.116432

 P_max_norm = 0.115159

 disp_L2_norm = 0.000136806

 disp_max_norm = 7.97065e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 13
Simulation time is 0.0253906
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0253906,0.0273438], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.62392e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0500484
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.150118
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 13
Simulation time is 0.0273438
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.134035

 WSS_max_norm = 0.0775177

 U_L2_norm = 0.00203404

 U_max_norm = 0.00114116

 P_L2_norm = 0.115876

 P_max_norm = 0.114487

 disp_L2_norm = 0.000133185

 disp_max_norm = 7.76356e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 14
Simulation time is 0.0273438
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0273438,0.0292969], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 2.00106e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0500576
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.200175
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 14
Simulation time is 0.0292969
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.13344

 WSS_max_norm = 0.0771796

 U_L2_norm = 0.00154981

 U_max_norm = 0.000854801

 P_L2_norm = 0.115276

 P_max_norm = 0.113762

 disp_L2_norm = 0.000136012

 disp_max_norm = 7.92738e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 15
Simulation time is 0.0292969
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0292969,0.03125], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.70174e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0500668
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.250242
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 15
Simulation time is 0.03125
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.133886

 WSS_max_norm = 0.0774445

 U_L2_norm = 0.00144011

 U_max_norm = 0.000846209

 P_L2_norm = 0.114632

 P_max_norm = 0.112986

 disp_L2_norm = 0.000133719

 disp_max_norm = 7.79473e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 16
Simulation time is 0.03125
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.03125,0.0332031], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.93938e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.050076
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.300318
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 16
Simulation time is 0.0332031
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.1335

 WSS_max_norm = 0.077227

 U_L2_norm = 0.00113743

 U_max_norm = 0.000902815

 P_L2_norm = 0.113944

 P_max_norm = 0.112156

 disp_L2_norm = 0.000135549

 disp_max_norm = 7.8986e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 17
Simulation time is 0.0332031
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0332031,0.0351562], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.741e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0500851
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.350403
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 17
Simulation time is 0.0351562
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.133778

 WSS_max_norm = 0.0773952

 U_L2_norm = 0.00113442

 U_max_norm = 0.000960047

 P_L2_norm = 0.113211

 P_max_norm = 0.111273

 disp_L2_norm = 0.000134131

 disp_max_norm = 7.81369e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 18
Simulation time is 0.0351562
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0351562,0.0371094], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.88983e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0500943
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.400497
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 18
Simulation time is 0.0371094
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.133526

 WSS_max_norm = 0.077255

 U_L2_norm = 0.000975332

 U_max_norm = 0.00101787

 P_L2_norm = 0.112433

 P_max_norm = 0.110336

 disp_L2_norm = 0.000135355

 disp_max_norm = 7.87948e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
At beginning of timestep # 19
Simulation time is 0.0371094
IBHierarchyIntegrator::advanceHierarchy(): time interval = [0.0371094,0.0390625], dt = 0.00195312
IBHierarchyIntegrator::preprocessIntegrateHierarchy(): performing Lagrangian forward Euler step
IBHierarchyIntegrator::advanceHierarchy(): integrating hierarchy
IBHierarchyIntegrator::integrateHierarchy(): computing Lagrangian force
IBHierarchyIntegrator::integrateHierarchy(): spreading Lagrangian force to the Eulerian grid
IBHierarchyIntegrator::integrateHierarchy(): solving the incompressible Navier-Stokes equations
INSStaggeredHierarchyIntegrator::integrateHierarchy(): stokes solve residual norm        = 1.75492e-08
IBHierarchyIntegrator::integrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::integrateHierarchy(): performing Lagrangian midpoint-rule step
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): interpolating Eulerian velocity to the Lagrangian mesh
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): CFL number = 0.0501034
IBHierarchyIntegrator::postprocessIntegrateHierarchy(): Eulerian estimate of upper bound on IB point displacement since last regrid = 0.450601
IBHierarchyIntegrator::advanceHierarchy(): synchronizing updated data
IBHierarchyIntegrator::advanceHierarchy(): resetting time dependent data

At end       of timestep # 19
Simulation time is 0.0390625
+++++++++++++++++++++++++++++++++++++++++++++++++++


Writing state data...

 WSS_L2_norm = 0.133697

 WSS_max_norm = 0.0773615

 U_L2_norm = 0.00102259

 U_max_norm = 0.00107634

 P_L2_norm = 0.11161

 P_max_norm = 0.109346

 disp_L2_norm = 0.000134526

 disp_max_norm = 7.8251e-05


+++++++++++++++++++++++++++++++++++++++++++++++++++
Computing error norms.

 p_Eulerian_L2_norm = 0.000328052

 p_Eulerian_max_norm = 0.0225419

 u_Eulerian_L2_norm = 4.12223e-05

 u_Eulerian_max_norm = 0.0016839

Error in u at time 0.0390625:
  L1-norm:  0.04937986269955528
  max-norm: 0.02076621405771403
  L2-norm:  0.009428518634580075
+++++++++++++++++++++++++++++++++++++++++++++++++++
Error in p at time 0.0380859375:
  L1-norm:  0.5954980565749715
  max-norm: 0.09987910531031441
  L2-norm:  0.1552171874913357
+++++++++++++++++++++++++++++++++++++++++++++++++++
 MU = 0.01
  dx:  0.0390625
 theta = 0
  dt: 0.001953125
 Using the jump condition
